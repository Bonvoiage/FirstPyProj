'''
Списки

Список (list) — это упорядоченный набор элементов, каждый из которых имеет свой номер, или индекс, позволяющий быстро получить к нему доступ. Нумерация элементов в списке начинается с 0

В одном списке одновременно могут лежать данные разных типов — например, и строки, и числа. А ещё в один список можно положить другой и ничего не сломается:

Когда мы создаём объект list, в памяти компьютера под него резервируется место. Нам не нужно переживать о том, сколько выделяется места и когда оно освобождается, — Python всё сделает сам. Например, когда мы добавляем новые элементы, он выделяет память, а когда удаляем старые — освобождает.
Однако в списках Python можно хранить объекты разного размера и типа. 
И тут есть небольшой трюк: списки в Python представляют собой массив ссылок. Каждый элемент такого массива хранит не сами данные, а ссылку на их расположение в памяти компьютера! 
'''
# import sys

# a = [1, 2]
# b = a
# a[0] = 5

# print(a)
# print(b)

# print(sys.getsizeof(a))
# print(sys.getsizeof(b))

# print(id(a))
# print(id(b))


'''
Как создать список в Python
Чтобы создать объект list, в Python используют квадратные скобки — []. Внутри них перечисляют элементы через запятую:
'''
import pprint

# a = [1, 2, 3]
# b = ['cat', 123, True]
# c = [1, 2, [3, 4]]

'''
Операции со списками
Если просто хранить данные в списках, то от них будет мало толку. Поэтому давайте рассмотрим, какие операции они позволяют выполнить.

Индексация
Доступ к элементам списка получают по индексам, через квадратные скобки []
'''
# a = [1, 2, 3]

# print(a[-6])

'''
Что будет, если обратиться к несуществующему индексу?
'''
# print(a[3])

'''
Двоеточие позволяет получить срез списка. Полная форма оператора выглядит так: начальный_индекс:конечный_индекс:шаг.
'''
# a = [1, 2, 3, 4, 5]

# print(a[1:4:2]) # Получим [2, 4]
# print(a[:4:2]) # Получим [1, 3]
# print(a[1::2]) # Получим [2, 4]
# print(a[::2]) # Получим [1, 3, 5]

'''
Изменение элементов
Списки — это динамическая структура данных. А значит, мы можем менять их уже после создания.

Например, можно заменить один элемент на другой:
'''
# a = [1, 2, 3] 
# # a[1] = 4 # [1, 4, 3]

# a[0], a[-1] = a[-1], a[0] # [3, 2, 1]

# print(a)

'''
Но нужно быть осторожными, потому что может случиться такое:
'''
# a = [1, 2]
# b = a
# a[0] = 5

# print(a)
# print(b)

'''
Проблема в том, что a — это ссылка на область в памяти компьютера, где хранится первый элемент списка, а также на следующий его элемент. Вот как всё это устроено в памяти компьютера:
Каждый элемент списка имеет четыре секции: свой адрес, данные, адрес следующего элемента и адрес предыдущего. Если мы получили доступ к какому-то элементу, мы без проблем можем двигаться вперёд-назад по этому списку и менять его данные.
Поэтому, когда мы присвоили списку b список a, то на самом деле присвоили ему ссылку на первый элемент — по сути, сделав их одним списком.

Сложение списков
'''
# a = [1, 2]
# b = [3, 4]

# print(a + b)

'''
Разложение списка
Элементы списка можно присвоить отдельным переменным
Здесь из списка a поочерёдно достаются элементы, начиная с индекса 0, и присваиваются переменным. И в отличие от присвоения одного списка другому, в этом случае Python создаст три отдельных целых числа, которые никак не будут связаны с элементами списка, и присвоит их трём переменным. Поэтому, если мы изменим, например, переменную d2, со списком a ничего не случится.
'''
# a = [1, 2, 3]
# d1, d2, d3 = a

# print(d1)
# print(d2)
# print(d3)

'''
Перебор элементов
Мы можем перебирать элементы списка с помощью циклов for и while.

Так выглядит перебор через for
'''
# animals = ['cat', 'dog', 'bat']
# for animal in animals:
#     print(animal)

'''
А вот так выглядит перебор через цикл while:
'''
# animals = ['cat', 'dog', 'bat']
# i = 0
# while i < len(animals):
#     print(animals[i])
#     i += 1

'''
Этот перебор чуть сложнее, потому что мы используем дополнительную переменную i, чтобы обращаться к элементам списка. Также мы использовали встроенную функцию len(), чтобы узнать размер нашего списка. А ещё в условии цикла while мы указали знак «меньше» (<), потому что индексация элементов идёт до значения количество элементов списка — 1. Как и в прошлом примере, все элементы по очереди выводятся с помощью функции print().
'''

'''
Сравнение списков
Python поддерживает сравнение списков. Два списка считаются равными, если они содержат одинаковые элементы. Функция возвращает булево значение — True или False:
'''
# a = [1, 2, 3]
# b = [1, 2, 3]
# print(a == b)

'''
В Python это же самое можно сделать и через оператор is, который проверяет, имеют ли две переменные один и тот же адрес в памяти:
'''
# import sys

# a = [1, 2, 3]
# b = a
# print(a is b)

# print(sys.getsizeof(a))
# print(sys.getsizeof(b))

# print(id(a))
# print(id(b))

'''
Встроенные функции для списков Python
В Python есть четыре функции, которые позволяют узнавать длину списка, сортировать его и возвращать максимальное и минимальное значение.
'''
'''
len()
Возвращает длину списка:
'''
# a = [5, 3, 1]
# print(len(a))

'''
sorted()
Возвращает отсортированный список:
'''
# a = [8, 1, 3, 2]
# print(sorted(a)) # [1, 2, 3, 8]

'''
min() и max()
Возвращают наименьший и наибольший элемент списка:
'''
# a = [1, 9, -2, 3]
# print(min(a)) # -2
# print(max(a)) # 9

'''
Методы списков Python
Чтобы проще управлять элементами списка, в стандартной библиотеке Python есть набор популярных методов для списков. Разберём основные из них.

append()
Добавляет новый элемент в конец списка:
'''
# a = [1, 2, 3]
# a.append(4)
# print(a) 

'''
extend()
Добавляет набор элементов в конец списка:
'''
# a = [1, 2, 3]
# a.extend([4, 5, 6, 7, 8])
# print(a) 

'''
Внутрь метода extend() нужно передать итерируемый объект — например, другой list или строку.

Вот так метод extend() добавит строку:
'''
# a = ['cat', 'dog', 'bat']
# a.extend('mouse')
# print(a)

'''
insert()
Добавляет новый элемент по индексу.
Сначала мы передаём индекс, по которому хотим вставить новый элемент, а затем сам элемент.
'''
a = [1, 2, 3]
print(a)
a.insert(1, 4)
print(a)
print(a)
print(a)

'''
remove()
Удаляет элемент из списка:
Метод удаляет только первое вхождение элемента. Остальные остаются нетронутыми.

Если элемента нет в списке, Python вернёт ошибку и программа прервётся
'''
# a = [1, 2, 3, 1]
# a.remove(3)
# print(a) 

# a = [1, 2, 3, 1]
# a.remove(5)

'''
clear()
Удаляет все элементы из списка и делает его пустым:
'''
# a = [1, 2, 3]
# a.clear()
# print(a) 

'''
index()
Возвращает индекс элемента списка в Python.
Если элемента нет в списке, выведется ошибка:
'''
# a = [1, 2, 3]
# print(a.index(2))

# a = [1, 2, 3]
# print(a.index(4))

'''
pop()
Удаляет элемент по индексу и возвращает его как результат:
'''
# a = [1, 2, 3]
# print(a.pop(1)) 
# print(a) 

'''
count()
Считает, сколько раз элемент повторяется в списке:
'''
# a = [1, 1, 1, 2]
# print(a.count(1)) 

'''
sort()
Сортирует список:
'''
# a = [4, 1, 5, 2]
# a.sort() # [1, 2, 4, 5]
# print(a)

'''
Если нам нужно отсортировать в обратном порядке — от большего к меньшему, — в методе есть дополнительный параметр reverse:
'''
# a = [4, 1, 5, 2]
# a.sort(reverse=True) # [5, 4, 2, 1]
# print(a)

'''
reverse()
Переставляет элементы в обратном порядке:
'''
a = [1, 3, 2, 4]
a.reverse() # [4, 2, 3, 1]
print(a)

'''
copy()
Копирует список:
'''
# a = [1, 2, 3]
# b = a.copy()
# print(b)


'''
Метод	        Что делает
a.append(x)	    Добавляет элемент x в конец списка a. Если x — список, то он появится в a как 
                вложенный
a.extend(b)	    Добавляет в конец a все элементы списка b
a.insert(i, x)	Вставляет элемент x на позицию i
a.remove(x)	    Удаляет в a первый элемент, значение которого равно x
a.clear()	    Удаляет все элементы из списка a и делает его пустым
a.index(x)	    Возвращает индекс элемента списка
a.pop(i)	    Удаляет элемент по индексу и возвращает его
a.count(x)	    Считает, сколько раз элемент повторяется в списке
a.sort()	    Сортирует список. Чтобы отсортировать элементы в обратном порядке, нужно установить 
                дополнительный аргумент reverse=True
a.reverse()	    Возвращает обратный итератор списка a
a.copy()	    Создаёт поверхностную копию списка. Для создания глубокой копии используйте метод 
                deepcopy из модуля copy
'''
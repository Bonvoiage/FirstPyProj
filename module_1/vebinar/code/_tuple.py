'''
Кортежи по функциональности похожи на списки.
Кортежи tuple в Python предназначены, как и списки, для хранения последовательностей, состоящих из данных любого типа. Однако, в отличие от списков, кортежи относятся к неизменяемым типам данных. По этой причине в них часто хранят информацию, которую необходимо защитить от случайного изменения – например, конфигурационные данные.

Кортежи не поддерживают добавление и удаление элементов, но допускают расширение и дополнение для тех элементов, которые относятся к изменяемым типам (списки, словари), а также любые операции с элементами элементов:
'''
# _tuple = (4, 5, 6)
# _tuple[0] = 404 # TypeError: 'tuple' object does not support item assignment.
# Текст ошибки: объект 'tuple' не поддерживает назначение элемента

# numbers = ([1, 2, 3, 4], [5, 4, 5])
# numbers[1].extend([3, 5, 9])
# numbers[0].append([7, 7, 8])
# numbers[1][1] += 5
# print(numbers) # ([1, 2, 3, 4, [7, 7, 8]], [5, 9, 5, 3, 5, 9])

'''
Кортежи поддерживают неограниченный уровень вложенности:
'''
# numbers = ((4, 5, 8, (5, 1, (5, 3))), (7, 2, (4, 5, (3, 1, 1))))

'''
Кортежи работают немного быстрее, чем списки – это связано с особенностями хранения tuple в памяти:
'''
from timeit import timeit
times = 1000000
t1 = timeit("list(['груша', 'виноград','яблоко', 'банан', 'апельсин'])", number=times)
t2 = timeit("tuple(('груша', 'виноград','яблоко', 'банан', 'апельсин'))", number=times)
diff = "{:.0%}".format((t2 - t1)/t1)
print(f'Время копирования списка {times} раз: {t1}')

print(f'Время копирования кортежа {times} раз: {t2}')

print(f'Разница: {diff}')

'''
 Кортежи занимают меньше места в памяти:
'''
# from sys import getsizeof
# numbers1 = ((1, 2, 3, 4), (5, 4, 5))
# numbers2 = [[1, 2, 3, 4], [5, 4, 5]]
# print(getsizeof(numbers1))

# print(getsizeof(numbers2))

'''
Кортежи поддерживают конкатенацию + и повторение * n:
'''
# num1 = (1, 2, 3)
# num2 = (4, 5, 6)
# print(num1 + num2)

# print(num1 * 3)

'''
Пустой кортеж можно создать двумя способами – с помощью круглых скобок () и с использованием функции tuple():
'''
# my_tuple = ()
# my_tuple2 = tuple()

'''
При создании кортежа с одним элементом после этого элемента необходимо ставить запятую, иначе Python не определяет конструкцию как кортеж:
'''
# my_tuple = (5)
# print(type(my_tuple))
# # <class 'int'>

# my_tuple = (5,)
# print(type(my_tuple))
# # <class 'tuple'>

'''
Как и в случае со списками и словарями, кортеж с данными можно создать вручную. Кортеж может содержать данные различных типов:
'''
# info = ('Егор', 'разработчик', 350000, 28)

'''
Элементы кортежа необязательно перечислять в круглых скобках – когда Python получает более одного значения для переменной, создание ("упаковка") кортежа происходит автоматически:
'''
# letters = 'a', 'b', 'c', 'd'
# print(letters)

'''
С помощью встроенной функции tuple() можно создать кортеж из списка, строки или множества:
'''
# my_lst = [4, 6, 2, 8]
# print(tuple(my_lst))

# my_str = 'Преобразование строки в кортеж'
# print(tuple(my_str))

# my_set = {2, 5, 6, 7}
# print(tuple(my_set))

# преобразование словара в кортеж. Но при этом в котреже останутся только ключи
# my_dict = {'яблоки': 52, 'апельсины': 35}
# print(tuple(my_dict))

'''
Число напрямую преобразовать в кортеж нельзя:
'''
# num = 178394
# print(tuple(num))

'''
Но если конвертировать число в строку, преобразование пройдет без ошибок:
'''
# num = 31232534
# print(tuple(str(num)))

'''
Если нужно разбить строку по одному разделителю, подойдет метод partition():
'''
# st = 'Преобразование строки в кортеж'
# print(st.partition(' '))

'''
Чтобы разбить строку по всем разделителям, вместе с tuple() используют split():
'''
# st = 'Преобразование строки в кортеж'
# st = tuple(st.split())
# print(st)

'''
Генераторы кортежей, в отличие от списков и словарей, не слишком удобно использовать для решения практических задач:
'''
# my_tuple = (i for i in range(5))
# print(my_tuple)

'''
Но если генератор кортежа все-таки необходимо использовать, это можно сделать двумя способами.
Распаковать сгенерированный объект при выводе:
'''
# numbers = (i for i in range(10))
# print(*numbers)

'''
Либо использовать в генераторе функцию tuple():
'''

# my_tuple = tuple(i for i in range(10))
# print(my_tuple)

'''
Оператор распаковки * и запятая после имени переменной автоматически превращают строки и списки в кортежи:
'''
# st = 'Распаковка строки в кортеж'
# sp = ['Python', 'HTML5', 'CSS', 'JavaScript']
# tuple1 = (*st,)
# tuple2 = (*sp,)

# print(tuple1)

# print(tuple2)

'''
Кортежи поддерживают большинство методов списков, за исключением удаления элементов и присваивания им новых значений.
Индексация и срезы в кортежах работают так же, как и в списках:
'''

# my_tuple = ('банан', 'груша', 'манго')
# print(my_tuple[0], my_tuple[-1])

# print(my_tuple[1:])

# print(my_tuple[::-1])

'''
Для возвращения индексa элемента используется index():
# '''
# nutr = ('белки', 'жиры', 'углеводы')
# print(nutr.index('белки'))

'''
Длина, сумма, минимальный и максимальный элементы
Эти методы тоже аналогичны списочным:
'''
# my_tuple = ('карандаш', 'ручка', 'шар')
# print(len(my_tuple))

# print(min(my_tuple, key=len))

# print(max(my_tuple, key=len))

# nums = (4, 5, 2, 1, 6)
# print(sum(nums))

'''
Принадлежность
С помощью операторов in и not in можно убедиться в наличии (отсутствии) определенного значения в кортеже:
'''
# nums = (1, 3, 5, 6, 7, 8)
# print(5 in nums)

# print(25 not in nums)

# print(25 in nums)

'''
Кортежи поддерживают сортировку, однако результатом будет список:
# '''
# nums = (4, 1, 7, 2, 0, 9, 5)
# print(sorted(nums))

'''
Если результат должен сохраняться в виде кортежа, нужно использовать tuple():
'''
# nums = (4, 1, 7, 2, 0, 9, 5)
# print(tuple(sorted(nums, reverse=True)))

'''
Кортеж можно преобразовать в строку:
'''

# letters = ('P', 'y', 't', 'h', 'o', 'n')
# print(''.join(letters))

'''
В список:
'''
# sp = (2, 7, 5, 8, 1)
# print(list(sp))

'''
В словарь (если кортеж вложенный и состоит из пар значений):
'''
# info = (('фрукты', 5), ('овощи', 15), ('конфеты', 3))
# print(dict(info))

'''
Во множество:
'''
# numbers = (3, 2, 1, 6, 7, 2, 2, 9)
# print(set(numbers))

'''
Как и списки, кортежи с однородными данными можно сравнивать между собой с помощью операторов >, >=, <, <=, ==, !=. Если элементы кортежей принадлежат к разным типам данных, поддерживаются только операторы == и !=.
'''
# tuple1 = (1, 2, 3)
# tuple2 = (4, 5, 6)
# print(tuple1 < tuple2)

# print(tuple1 != tuple2)




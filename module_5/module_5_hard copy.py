# #Дополнительное практическое задание по модулю



class User:

    db_users = {}

    def __init__ (self, nickname, password, age):
        self.db = User.db_users
        self.nickname = nickname       
        self.password = hash(password)
        self.age = age                
        self.db[nickname] = [hash(password), age]
        
        
    def login(self, username, password):
        pass
    def current_user_access(self):
        pass


class Video:
    
    db_videos = {}
    db_keys_lower = []

    def __init__(self, tittle : str, duration, time_now = 0, adult_mode = False):
        self.db = Video.db_videos
        self.title = tittle             
        self.duration = duration        
        self.time_now = time_now        
        self.adult_mode = adult_mode
        self.db[tittle] = [duration, time_now, adult_mode]
        self.lower = Video.db_keys_lower
        self.lower.append(tittle.lower())


class UrTube:

    def __init__(self, *args, **kwargs):
        pass


    def register(self, username, password, age):
          #добавил юзера в базу данных класса юзер
        if username in  User.db_users.keys():
            print("Пользователь уже зарегистрирован")
        else:
            User(username, password, age)
            print("Пользователь успешно зарегистрирован")
            UrTube.log_in(self, username, password)
            print("Вход выполнен, здравствйуте, ", username)

    def add(self, tittle : str, duration : int, time_now = 0, adult_mode = False):
        if tittle in Video.db_videos.keys():
            print(f"Видео {tittle} уже существует")
        else:
            print("Видео успешно добавлено")
            Video(tittle, duration, time_now, adult_mode)  #добавил видео в базу данных класса видео

    def log_in(self, username, password):
        if User.db_users[username][0] == hash(password):   #проверил юзера в базе данных
            return True
        else:
            return False
        
    def get_videos(self, part_of_tittle):
        for part_of_tittle in Video.db_keys_lower:
            print(Video.db_keys_lower)
        else:
            print("Видео не найдено")

            



ur = UrTube()

v1 = Video('Лучший язык программирования 2024 года', 200)
v2 = Video('Для чего девушкам парень программист?', 10, adult_mode=True)

ur.add(v1, v2)

print(v1.title, ",", v2.title)
print()
print(Video.db_videos)
print()

print(ur.get_videos('лучший'))
print(ur.get_videos('ПРОГ'))


# user_add_test = ur.register(
#     username := input("Введите имя: "),
#     password := int(input("Введите пароль: ")),
#     age := int(input("Введите возраст: "))
# )

ur.register('vasya_pupkin', 'lolkekcheburek', 13)
ur.register('urban_pythonist', 'iScX4vIJClb9YQavjAgF', 25)

# Проверка входа в другой аккаунт
ur.register('vasya_pupkin', 'F8098FM8fjm9jmi', 55)

print(User.db_users)


input("Нажмите Enter для продолжения...")
print()







# Дополнительное практическое задание по модулю: "Классы и объекты."

# Цель: Применить знания полученные в модуле, решив задачу повышенного уровня сложности.

# Задание "Свой YouTube":
# Университет Urban подумывает о создании своей платформы, где будут размещаться дополнительные полезные ролики на тему IT (юмористические, интервью и т.д.). Конечно же для старта написания интернет ресурса требуются хотя бы базовые знания программирования.

# Именно вам выпала возможность продемонстрировать их, написав небольшой набор классов, которые будут выполнять похожий функционал на сайте.

# Всего будет 3 класса: UrTube, Video, User.

# Общее ТЗ:
# Реализовать классы для взаимодействия с платформой, каждый из которых будет содержать методы добавления видео, авторизации и регистрации пользователя и т.д.

# Подробное ТЗ:

# Каждый объект класса User должен обладать следующими атрибутами и методами:
# Атриубуты: nickname(имя пользователя, строка), password(в хэшированном виде, число), age(возраст, число)
# Каждый объект класса Video должен обладать следующими атрибутами и методами:
# Атриубуты: title(заголовок, строка), duration(продолжительность, секунды), time_now(секунда остановки (изначально 0)), adult_mode(ограничение по возрасту, bool (False по умолчанию))
# Каждый объект класса UrTube должен обладать следующими атрибутами и методами:
#  Атриубты: users(список объектов User), videos(список объектов Video), current_user(текущий пользователь, User)
# Метод log_in, который принимает на вход аргументы: nickname, password и пытается найти пользователя в users с такими же логином и паролем. Если такой пользователь существует, то current_user меняется на найденного. Помните, что password передаётся в виде строки, а сравнивается по хэшу.
# Метод register, который принимает три аргумента: nickname, password, age, и добавляет пользователя в список, если пользователя не существует (с таким же nickname). Если существует, выводит на экран: "Пользователь {nickname} уже существует". После регистрации, вход выполняется автоматически.
# Метод log_out для сброса текущего пользователя на None.
# Метод add, который принимает неограниченное кол-во объектов класса Video и все добавляет в videos, если с таким же названием видео ещё не существует. В противном случае ничего не происходит.
# Метод get_videos, который принимает поисковое слово и возвращает список названий всех видео, содержащих поисковое слово. Следует учесть, что слово 'UrbaN' присутствует в строке 'Urban the best' (не учитывать регистр).
# Метод watch_video, который принимает название фильма, если не находит точного совпадения(вплоть до пробела), то ничего не воспроизводится, если же находит - ведётся отчёт в консоль на какой секунде ведётся просмотр. После текущее время просмотра данного видео сбрасывается.
# Для метода watch_video так же учитывайте следующие особенности:
# Для паузы между выводами секунд воспроизведения можно использовать функцию sleep из модуля time.
# Воспроизводить видео можно только тогда, когда пользователь вошёл в UrTube. В противном случае выводить в консоль надпись: "Войдите в аккаунт, чтобы смотреть видео"
# Если видео найдено, следует учесть, что пользователю может быть отказано в просмотре, т.к. есть ограничения 18+. Должно выводиться сообщение: "Вам нет 18 лет, пожалуйста покиньте страницу"
# После воспроизведения нужно выводить: "Конец видео"

# Код для проверки:
# ur = UrTube()
# v1 = Video('Лучший язык программирования 2024 года', 200)
# v2 = Video('Для чего девушкам парень программист?', 10, adult_mode=True)

# # Добавление видео
# ur.add(v1, v2)

# # Проверка поиска
# print(ur.get_videos('лучший'))
# print(ur.get_videos('ПРОГ'))

# # Проверка на вход пользователя и возрастное ограничение
# ur.watch_video('Для чего девушкам парень программист?')
# ur.register('vasya_pupkin', 'lolkekcheburek', 13)
# ur.watch_video('Для чего девушкам парень программист?')
# ur.register('urban_pythonist', 'iScX4vIJClb9YQavjAgF', 25)
# ur.watch_video('Для чего девушкам парень программист?')

# # Проверка входа в другой аккаунт
# ur.register('vasya_pupkin', 'F8098FM8fjm9jmi', 55)
# print(ur.current_user)

# # Попытка воспроизведения несуществующего видео
# ur.watch_video('Лучший язык программирования 2024 года!')

# Вывод в консоль:
# ['Лучший язык программирования 2024 года']
# ['Лучший язык программирования 2024 года', 'Для чего девушкам парень программист?']
# Войдите в аккаунт, чтобы смотреть видео
# Вам нет 18 лет, пожалуйста покиньте страницу
# 1 2 3 4 5 6 7 8 9 10 Конец видео
# Пользователь vasya_pupkin уже существует
# urban_pythonist

# Примечания:
# Не забывайте для удобства использовать dunder(магические) методы: __str__, __repr__, __contains__, __eq__ и др. (повторить можно здесь)
# Чтобы не запутаться рекомендуется после реализации каждого метода проверять как он работает, тестировать разные вариации.

# Файл с кодом (module5hard.py) прикрепите к домашнему заданию или пришлите ссылку на ваш GitHub репозиторий с файлом решения.
